from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.db.db_helper import sessionmanager
from app.settings import settings
from app.states import MessageToUser
from app.utils import create_link
from app.—Årud import get_user_by_id, create_user, get_user_by_link, get_message_model_by_id, create_anon_message

HELLO_MSG = '''
üöÄ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É

‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å, –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ–Ω –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ

–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, üí¨ —Ç–µ–∫—Å—Ç, üîä –≥–æ–ª–æ—Å–æ–≤—ã–µ, üì∑ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∏), –∞ —Ç–∞–∫–∂–µ ‚ú® —Å—Ç–∏–∫–µ—Ä—ã'''


LINK_MSG = f"""
–ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

üëâ t.me/{settings.BOT_LINK}?start=LINK

–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è Telegram, TikTok, Instagram (stories), —á—Ç–æ–±—ã –≤–∞–º –º–æ–≥–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å üí¨"""


router = Router(name=__name__)


@router.message(Command("start", prefix="/!%"))
async def start(message: types.Message, state: FSMContext):

    uid = str(message.from_user.id)

    async with sessionmanager.session() as session:
        user = await get_user_by_id(session=session, user_id=uid)
        if user is None:
            link = create_link()
            user = await create_user(
                session=session,
                user_id=str(message.from_user.id),
                username=message.from_user.username,
                chat_id=str(message.chat.id),
                link=link,
                name=message.from_user.full_name,
                with_commit=False
            )

        words = message.text.split()

        if len(words) > 1:
            print(1231312313)
            link = words[1].strip()

            user = await get_user_by_link(session, link=link)
            if user:
                await state.update_data(to_chat_id=user.chat_id)
                await state.update_data(to_user_id=user.id)
                await state.update_data(sender_username=message.from_user.username)
                await state.update_data(sender_name=message.from_user.full_name)

                await state.set_state(MessageToUser.text)
                await message.answer(HELLO_MSG)
                await message.answer("–ù–∞–ø–∏—à–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                await session.commit()
                return
            await message.answer("–ü–æ—Ö–æ–∂–µ, —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
            return

        await message.answer(LINK_MSG.replace("LINK", user.link))

        await session.commit()


@router.message(MessageToUser.text)
async def text_handler(message: types.Message, state: FSMContext):

    data = await state.get_data()

    m = None

    if message.text:
        m = await message.bot.send_message(
            chat_id=data["to_chat_id"],
            text=f"üîî –£ –í–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n<blockquote>{message.text}</blockquote>\n\n‚Ü©Ô∏è –°–≤–∞–π–ø–Ω–∏—Ç–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞."
        )

    if message.caption:
        caption = f"üîî –£ –í–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n<blockquote>{message.caption}</blockquote>\n\n‚Ü©Ô∏è –°–≤–∞–π–ø–Ω–∏—Ç–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞."
    else:
        caption = f"üîî –£ –í–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n‚Ü©Ô∏è –°–≤–∞–π–ø–Ω–∏—Ç–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞."

    if message.photo:
        m = await message.bot.send_photo(
            chat_id=data["to_chat_id"],
            photo=message.photo[-1].file_id,
            caption=caption
        )

    if message.sticker:
        m = await message.bot.send_sticker(
            chat_id=data["to_chat_id"],
            sticker=message.sticker.file_id
        )
        await message.bot.send_message(
            chat_id=data["to_chat_id"],
            text=caption
        )
    if message.video:
        m = await message.bot.send_video(
            chat_id=data["to_chat_id"],
            video=message.video.file_id,
            caption=caption
        )
    if message.voice:
        m = await message.bot.send_voice(
            chat_id=data["to_chat_id"],
            voice=message.voice.file_id,
            caption=caption
        )
    await message.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

    async with sessionmanager.session() as session:

        await create_anon_message(
            session=session,
            sender_id=str(message.from_user.id),
            to_chat_id=data["to_chat_id"],
            message_id=str(m.message_id),
            with_commit=False
        )

        user = await get_user_by_id(session, user_id=str(message.from_user.id))

        await message.answer(LINK_MSG.replace("LINK", user.link))

        if data["to_user_id"] in settings.ADMINS:
            txt = f"^^^^^^^^^\n@{data["sender_username"]}\n{data["sender_name"]}"
            await message.bot.send_message(chat_id=data["to_chat_id"], text=txt)
        await session.commit()

    await state.clear()


@router.message(lambda message: message.reply_to_message)
async def reply_handler(message: types.Message):
    async with sessionmanager.session() as session:

        msg = await get_message_model_by_id(
            session=session,
            to_chat_id=str(message.chat.id),
            message_id=str(message.reply_to_message.message_id)
        )

        user = await get_user_by_id(session=session, user_id=str(message.from_user.id))

        if msg:
            sender = await get_user_by_id(session=session, user_id=msg.sender)

            btn1 = InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë', url=f'https://t.me/{settings.BOT_LINK}?start={user.link}')

            kb = InlineKeyboardMarkup(inline_keyboard=[[btn1,]])


            await message.bot.send_message(
                chat_id=sender.chat_id,
                text=f"üîî –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç:\n\n<blockquote>{message.text}</blockquote>",
                reply_markup=kb
            )

            await message.reply("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")



